#!/bin/bash

set -e

# Read configuration
if [[ -r "$1" ]]; then
    source "$1"
fi

# Namespace Config
NETNS=${NETNS:-main}


#
# Interface config
#
HOST_VETH=${HOST_VETH:-veth0}
HOST_ADDR=${HOST_ADDR:-172.31.0.1/24}
GUEST_VETH=${GUEST_VETH:-ceth0}
GUEST_ADDR=${GUEST_ADDR:-172.31.0.100/24}

TUN_IF=${TUN_IF:-tun0}
TUN_IP=${TUN_IP:-10.0.0.1}
TUN_IP6=${TUN_IP6:-fc00::1}
TUN_NETMASK=${TUN_NETMASK:-255.255.255.0}


#
# Network config
#
SOCKS5_ADDR=${SOCKS5_ADDR:-${HOST_ADDR%%/*}}
SOCKS5_PORT=${SOCKS5_PORT:-1080}
DNS=${DNS:-9.9.9.9}
DNS_OVER_TCP=${DNS_OVER_TCP:-1}
ROUTE_LOCALNET=${ROUTE_LOCALNET:-0}
ENABLE_IPV6=${ENABLE_IPV6:-0}


#
# Global variables
#
RESOLV_FILE="/run/proxy-ns/$NETNS/resolv.conf"
RESOLV_CONTENT="nameserver $DNS"
SOCKS5_SERVER="${SOCKS5_ADDR}:${SOCKS5_PORT}"


#
# Functions
#
function exit_if_not_root {
    if [[ $(id -u) -ne 0 ]]; then
        echo "Error: Not executing as root"
        exit 1;
    fi
}

function resolv_gen {
    if [[ ! $DNS_OVER_TCP -eq 0 ]]; then
        RESOLV_CONTENT="$RESOLV_CONTENT"$'\n'"options use-vc"
    fi

    rm -rf $RESOLV_FILE
    mkdir -p "$(dirname "$RESOLV_FILE")"
    echo "$RESOLV_CONTENT" > $RESOLV_FILE
}

function setup_route {
    ip netns exec ${NETNS} ip route add ${SOCKS5_ADDR}/32 via ${HOST_ADDR%%/*} dev ${GUEST_VETH%%/*}
}

function setup_nat {
    iptables -t nat -I POSTROUTING --source ${GUEST_ADDR%%/*} --destination ${SOCKS5_ADDR} -j MASQUERADE
    iptables -I FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    iptables -I FORWARD -i ${HOST_VETH} --destination ${SOCKS5_ADDR} -j ACCEPT
}

function remove_nat {
    iptables -t nat -D POSTROUTING --source ${GUEST_ADDR%%/*} --destination ${SOCKS5_ADDR} -j MASQUERADE
    iptables -D FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    iptables -D FORWARD -i ${HOST_VETH} --destination ${SOCKS5_ADDR} -j ACCEPT
}

function tun_to_socks {
    local logger_option tun2socks args
    if [[ -t 1 ]]; then
        logger_option=stdout
    else
        logger_option=syslog
    fi

    tun2socks="$(which badvpn-tun2socks)"

    if [[ -z "$tun2socks" ]]; then
	    echo "badvpn-tun2socks not found in PATH"
	    exit 1
    fi

    setcap cap_net_admin=ep "$tun2socks"
    args=(
        su nobody -s "$tun2socks" --
        --tundev $TUN_IF
        --netif-ipaddr $TUN_IP --netif-netmask $TUN_NETMASK
        --socks-server-addr $SOCKS5_SERVER --socks5-udp
        --logger $logger_option
    )
    if [[ ${ENABLE_IPV6} -eq 1 ]]; then
        args+=(--netif-ip6addr $TUN_IP6)
    fi
    ip netns exec $NETNS "${args[@]}"
}

function up {
    ip netns add $NETNS

    ip link add $HOST_VETH type veth peer name $GUEST_VETH
    ip link set $HOST_VETH up
    ip addr add $HOST_ADDR dev $HOST_VETH

    ip link set $GUEST_VETH netns $NETNS
    ip netns exec $NETNS ip link set lo up
    ip netns exec $NETNS ip link set $GUEST_VETH up
    ip netns exec $NETNS ip addr add $GUEST_ADDR dev $GUEST_VETH

    if [[ ${SOCKS5_ADDR} != ${HOST_ADDR%%/*} ]]; then
        setup_route
        setup_nat
        sysctl net.ipv4.ip_forward=1
    else
        iptables -I INPUT --source ${GUEST_ADDR%%/*}/32 -j ACCEPT
    fi

    tun_to_socks &
    sleep 0.5

    resolv_gen

    ip netns exec $NETNS ip link set $TUN_IF up
    ip netns exec $NETNS ip addr add $TUN_IP/24 dev $TUN_IF
    ip netns exec $NETNS ip route add default via $TUN_IP dev $TUN_IF

    if [[ ${ENABLE_IPV6} -eq 1 ]]; then
        ip netns exec $NETNS ip -6 addr add $TUN_IP6/7 dev $TUN_IF
        ip netns exec $NETNS ip -6 route add default dev $TUN_IF
    fi

    if [[ ${ROUTE_LOCALNET} -eq 1 ]]; then
        # redirect traffic to lo
        ip netns exec ${NETNS} ip route del local 127.0.0.1 dev lo || true
        ip netns exec ${NETNS} ip route del local 127.0.0.0/8 dev lo || true
        ip netns exec ${NETNS} sysctl net.ipv4.conf.${TUN_IF}.route_localnet=1 &> /dev/null || true
    fi

    wait
}

function down {
    ip link del $HOST_VETH
    ip netns del $NETNS

    if [[ ${SOCKS5_ADDR} != ${HOST_ADDR%%/*} ]]; then
        remove_nat
    else
        iptables -D INPUT --source ${GUEST_ADDR%%/*}/32 -j ACCEPT
    fi
}

function cleanup {
    wait
    down
}

exit_if_not_root

trap cleanup EXIT

up
